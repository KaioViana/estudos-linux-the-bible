grep 'user' /etc/passwd: kaiocesarviana:x:1000:1000:Kaio C√©sar Viana:/home/kaiocesarviana:/bin/bash -> defini√ß√£o do usu√°rio do sistema
date: Tue Nov 17 07:34:33 AM -03 2020 -> data do sistema
pwd: /home/kaiocesarviana/Documents -> exibe diret√≥rio de trabalho atual
hostname: localhost.localdomain -> exibe o nome de host do computador
ls -l -a -t -> -l:listagem longa; -a:arquivos de ponto oculto; -t:lista por tempo;
tar -cvf back.tar /home/'user' -> cria um backup, onde, c(create); v(verbose); f(file)
uname -a: tipo de sistema que est√° rodando. Ao adicionar -a, exibe o hostname, compila√ß√£o e a vers√£o do kernel
cd -> muda para outro diret√≥rio
mkdir -> cria um diret√≥rio
chmod -> altera a permiss√£o sobre um arquivo ou diret√≥rio
ls -ld -> permiss√µes de diret√≥rio

# DIRET√ìRIOS LINUX
/bin -> comandos comuns de usu√°rios
/boot -> cont√©m o kernel inicializ√°vel do Linux e os arquivos de configura√ß√£o do carregador de incializa√ß√£o (GRUB)
/dev -> cont√©m arquivos que representam os pontos de acesso a dispositivos em seus sistemas.
	* terminal(tyy*)
	* disquetes(fd*)
	* discos r√≠gidos(hd* ou sd*)
	* RAM(ram*)
	* CD-ROM(cd*)
Os usu√°rios podem acessar esses dispositivos diretamente atrav√©s desses arquivos de dispositivo, mas alguns apps ocultam dos 
usu√°rios finais o nome dos dispositivos reais.

/etc -> cont√©m arquivos de configura√ß√£o administrativa.
/home -> cont√©m diret√≥rios atribu√≠dos a cada usu√°rio regular com uma conta de login.(O usu√°rio root √© uma exce√ß√£o, usando /root
como seu diret√≥rio inicial)
/media -> fornece uma localiza√ß√£o padr√£o para dispositivos de automontagem(m√≠dia remov√≠vel em particular). Se o produto possuir
um nome de volume, esse nome √© normalmente usado como ponto de montagem.
/lib -> cont√©m bibliotecas compartilhadas requeridas por aplicativos em /bin e /sbin para inicializar o sistema
/mnt -> Um ponto de montagem comum para muitos dispositivos, antes de ser suplantado pelo diret√≥rio /media padr√£o.
/misc -> Um diret√≥rio usado √†s vezes para montar sistemas de arquivos mediante solicita√ß√£o.
/opt -> estrutura de diret√≥rios dispon√≠veis para armazenanr software suplementar.
/proc -> cont√©m informa√ß√µes sobre os recursos do sistema.
/root -> representa o diret√≥rio do usu√°rio root. O diret√≥rio inicial root n√£o resid sob /home por raz√µes de seguran√ßa.
/sbin -> cont√©m comandos administrativos e processos de daemon
/tmp -> cont√©m arquivos tempor√°rios usados pelos aplicativos.
/usr -> cont√©m a documenta√ß√£o do usua≈ïio, jogos, arquivos gr√°ficos(x11), bibliotecas(lib) uma variedade de outros comandos e
arquivos que n√£o s√£o necess√°rios durante o processo de inicializa√ß√£o.
/var -> cont√©m diret√≥rios de dados utilizados por v√°rios aplicativos. Em particular, esse √© o lugar onde voc√™ coloca arquivos
que voc√™ compartilha, como um servidor FTP ou web.


# METACARACTERES
* -> localiza qualquer n√∫mero de caracteres
? -> localiza qualquer caractere
[...] -> localiza qualquer um dos caracteres entre os colchotes, oque pode incluir uma gama de letras ou n√∫meros separados por h√≠fen


# METACARACTERES PARA REDIRECIONAMENTO DE ARQUIVOS

< -> direciona o conte√∫do de um arquivo para o comando. Na maioria dos casos, essa √© a√ß√£o padr√£o esperada pelo comando e o uso do caractere √© opcional; utilizar less bigfile √© o mesmo que less < bigfile
> -> direciona a sa√≠da padr√£o de um comando para um arquivo. Se o arquivo existir, o conte√∫do dele ser√° sobrescrito.
2> -> direciona mensagens de erro padr√£o para o arquivo
&> -> direciona tanto a sa√≠da padr√£o como o erro padr√£o para o arquivo.
>> direcionan a sa√≠da de um  commando para um arquivo, adicionando a sa√≠da ao final do arquivo existente


# Permiss√µes
r=4
w=2
x=1
A combina√ß√£o da soma desses valores ditam a permiss√£o aplicada, onde: primeira soma equivale ao propriet√°rio, a segunda ao grupo e o restante aos outros.
Pode ser feita tamb√©m atrav√©s de letras:
a=all
u=user
o=others

+=add
-=sub

r=read
w=write
x=exec

exemplo: chmod a -w file => r-xr-xr-x


# MOVENDO, COPIANDO E EXCLUINDO ARQUIVOS

mc -> mover
cp -> copiar
rm -> apagar


# ARQUIVOS DE TEXTO => VIM

w/W -> Move o cursor para o in√≠cio da pr√≥xima palavra
b/B -> Move o cursor para in√≠cio da palavra anterior
0 -> Move o cursor para o in√≠cio da linha atual
$ -> Move o cursor para o fim da linha atual
H -> Move o cursor para o canto superior da tela
M -> Move o cursor para o canto inferior da tela
L -> Move o cursor para o canto esquerdo inferior da tela


# EXCLUINDO, COPIANDO E ALTERANDO TEXTO

x -> Exclui o caractere sobre o cursor
X -> Exclui o caractere imediatemente antes do cursor
d<?> -> Exclui algum texto
c<?> -> Altera algum texto
y<?> -> Copia algum texto

O <?> depois de cada letra na lista anterior indentifica o lugar onde voc√™ pode utilizar um comando de movimento para escolher o que voc√™ est√° excluindo, alterando ou copiando. Por exemplo:

dw -> Exclui (d) uma palavra (w) ap√≥s a posi√ß√£o atual do cursor
db -> Exclui (d) uma palavra (b) antes da posi√ß√£o atual do cursor
dd -> Exclui (d) toda linha atual (d)
c$ -> Altera (c) os caracteres a partir do caractere atual at√© o final da linha atual ($) e entra no modo de entrada
c0 -> Altera (c) a partir do caractere anterior at√© o in√≠cio da linha atual (0) e entra no mode de entrada
cl -> Apaga (c) a letra atual (l) e entra no modo de entrada
cc -> Apaga (c) a linha atual (c) e entra no modo de entrada
yy -> Copia (y) a linha atual (y) para o buffer
y) -> Copia (y) a senten√ßa atual ()), √† direita do cursor, para o buffer
y} -> Copia (y) a par√°grafo atual (}), √† direita do cursor, para o buffer

Qualque um dos comandos mostrados somente pode ser modificado usando n√∫meros, como voc√™ pode ver nos exemplos a seguir:
3dd -> Exclui (d) tr√™s linhas (3d), come√ßando na linha atual.
3dw -> Apaga (d) as pr√≥ximas tr√™s palavras (3w).
5cl -> Altera (c) as pr√≥ximas (5) letras (l)
12j -> Move-se para baixo (j) 12 linhas (12)
5cw -> Apaga (c) as pr√≥ximas cinco (5) palavras (w) e entra no mode de entrada
4y) -> Copia (y) as pr√≥ximas quatro (4) senten√ßas ())


# COLANDO TEXTO

P -> Coloca o texto copiado √† esquerda do cursor se ele contiver letras ou palavras; coloca o texto copiado acima da linha atual se ele contiver linhas de texto
p -> Coloca o texto em buffer √† direita do cursor se ele contiver letras ou palavras; coloca o texto em buffer abaixo da linha atual se ele contiver linhas de texto


# SAINDO DO VI

ZZ -> Salva as mudan√ßas atuais no arquivo e sai do vi
:w -> Salve o arquivo atual, mas continua no modo de edi√ß√£o
:wq -> O mesmo que ZZ
:q -> Sai do arquivo atual. Isso s√≥ funciona se voc√™ n√£o tiver nunhuma altera√ß√£o
:q! -> Sai do arquivo atual e n√£o salva as altera√ß√£o feitas no arquivo

# PROCURANDO TEXTO

/hello -> Pesquisa para frente a palavra hello
?goodbye -> Pesquisa para tr√°s a palavra goodbye
?[pP]rint -> pesquisa para tr√° print ou Print

n/N -> Pra pesquisar para frente ou para tr√°s o mesmo termo de novo, respectivamente

# COMANDO FIND

Comando utilizado para localizar arquivos

find -ls -> lista arquivos de maneira longa
find -name -> lista arquivos pelo nome
find -iname -> lista arquivos com qualquer combina√ß√£o de letras
find -size -> lista arquivos por tamanho
find -user -> lista arquivos por usu√°rios
find -group -> lista arquivos por grupos
find -perm -> lista arquivos por permiss√µes
find -not/or -> condicionais
find -mmin -> lista arquivos por altera√ß√£o nos √∫ltimos minutos
find -ctime -> lista de acordo com altera√ß√£o nos comandos em dias
find -atime -> lista arquivos com altera√ß√£o em dias
find -exec -> executa um comando sobre o arquivo encontrado
find -ok -> pede confirma√ß√£o antes de executar um coman


# GERENCIANDO PROCESSOS EM EXECUCAO

	* Listando processos com o comando ps:
		ps -> vis√o geral dos processos em execu√√o.
		ps u -> vis√o detalhada dos procesos (quem executou e etc).
		
		A coluna STAT representa o estado do processo, com R indicando im processo em execucao e S um processo dormente.
		A coluna USER exibe o nome do usuario que iniciou o processo. Cada processo e representado por um ID(PID).
		A coluna VSZ inica o tamanho de processo de imagem e RSS exibe o tamanho do programa na memoria.
			- VSZ: tamanho de memoria alocada.
			- RSS: quantidade de memoria sendo utilizada.
		ps ux -> ver todos processos em execucao do usuario atual.
		ps aux -> ver todos processos em execucao de todos os usuarios.


	* listando e alterando processos com top:
		O comando top oferece uma maneira orientada para tela de exibir os processos em execucao no sistema.
		Voce tambem pode usar top para eliminar ou repriorizar um processo.
		
		Acoes que voce pode fazer com o top para mostrar informacoes de maneiras diferentes e modificar os processos em execucao:
			h -> ver as opcoes de ajuda e entao pressione qualquer tecla para retornar a tela de top;
			M -> ordenar por uso de memoria em vez de CPU e entao pressione P para voltar a ordenar por CPU;
			1 -> para exibir o uso da CPU de todas as suas CPUs, caso houver mais de uma;
			R -> para ordenar inversamente sua saida;
			u -> digite um nome de usuario para exibir processos apenas de um usuario especifico;


		Repriorizando um processo:
			aperte r e informe o ID do processo que dessaja repriorizar.
			Digite um numero entre -19 e 20;


		Eliminando um processo:
			Observe o ID do processo que voce deseja eleminar e pressione k.
			Digite 15 para terminar de forma limpa ou 9 para simplesmente eliminar o processo.


# GERENCIANDO PROCESSOS EM PRIMEIRO E SEGUNDO PLANOS
	* Iniciando processos em segundo plano:
		& -> para colocar um programa em segundo plano no  momento de execut√°- lo.

	* Utilizando comandos em primeiro e em segundo plano:
		fg %[numero do job] -> traz a tarefa para o primeiro plano.
		% -> Referencia o comando mais recente colocado em segundo plano (indicado pelo sinal de mais quando voc√ digita o comando jobs)
		%string -> referencia uma tarefa em que o comando come√a com uma determinada string
		%?string -> referencia uma tarefa em que a linha de comando cont√m uma string em qualquer ponto. A string n√o deve ser amb√gua.
		% -- -> referencia uma tarefa anterior parada antes da mais recente parada.

		bg -> inicia um job parado, por exemplo, para rodar em segundo plano. 


# ELIMINANDO E REPRIORIZANDO PROCESSOS
	* Eliminando processos com kill e killall:
		Embora geralmente usado para terminar um processo em execu√ao, os comando kell e killall podem ser usados para enviar qualquer
		sinal valido para um processo em execucao.

		SIGKILL(9) -> elimina um processo imediatamente;
		SIGTERM(15) -> tenta encerrar um processo de forma limpa;
		SIGHUP(1) -> instrui um processo a reler seus arquivos de config;
		SIGSTOP(17,19,23) -> para um processo;
		SIGCONT(19, 18, 25) -> continua um processo, se parado;


		Ex's: 
			kill 10432
			kill -15 10432
			kill -SIGKILL 10432
		

# CONFIGURANDO A PRIORIDADE SOBRE O PROCESSADOR COM NICE E RENICE
	Cada processo em execucao no sistema tem um valor de nice entre -20 e 19;
	Voce pode usar o comando nice para executar um comando com um determinado valor de nice.
	Uma vez que um processo est√° em execucao, voce pode alterar o valor de nice usando o comando renice,
	juntamente com o id de processo do processo.


# EXECUTANDO SCRIPTS SHELL SIMPLES:
	Pode-se usar set -x proximo do inicio do script para exibir cada comando que √ executado
	

	* Variaveis shell:
		Os nome de variaveis dentro de scripts de shell diferenciam maiusculas de minusculas;
			-> NAME=value

		As variaveis podem conter a saida de um comando ou uma sequencia de comandos.
		Voce pode fazer isso precedendo o comando com um sina de cifrao e parentese
		de abertura e seguindo-o com um parentese de fechamento;
			-> MYDATE=$(date) # ATRIBUI A SAIDA DO COMANDO DATE A VARIAVEL MYDATE;

		Colocar o comando entre (`) pode ter o mesmo efeito. Nesse caso, o comando date
		√©executado quando a variavel √©configurada e nao cada vez que a variavel √© lida;
		

	* Parametros de shell posicionais especiais:
		Existem variaveis especiais que o shell atribui para voce. Um conjunto de variaveis
		comumente usado e chamado de parametros posicionais ou argumentos de linha de comando
		e √©referenciado como:
			-> $0, $1, $2, $3... $n # $0 RECEBE O NOME USADO PARA CHAMAR O SCRIPT

		Outras variaveis:
			-> $# # INFORMA QUANTOS PARAMETROS SEU SCRIPT RECEBEU
			-> $@ # ARMAZENA TODOS OS ARGUMENTOS INSERIDOS NA LINHA DE COMANDO
			-> $? # RECEBE O STATUS DE SAIDA DO ULTIMO COMANDO EXECUTADO (0, sucesso, !0, erro de qualquer tipo)


	Usando o comando read, voce pode pedir informacoes do usuario e, entao, armazenar e usar essas
	informacoes mais tarde no seu script:
		-> read -p "as√ßlorem ipsum:" var1, var2, var3

	
	

# USANDO CONSTRUCOES DE PROGRAMACAO EM SCRIPTS DE SHELL:
	* if...then:
		-> VARIABLE=1
		   if [ $VARIABLE -eq 1  ] ; then # VERIFICA SE A VARIAVEL E IGUAL A 1, "then"
		   echo "THE VARIABLE is 1" #ECOA
		   fi # FINALIZA INSTRUCAO

		-> -eq, equivalente a (=) # funciona melhor para numeros enquanto, =, para strings

		-> STRING="FRIDAY"
		   if [ $STRING = "FRIDAY"  ] ; then
		   echo "WhooHoo. Friday."
	     	   else
	  	   echo "Will Friday ever get here?"
		   fi

		-> [ condition ] || action # VERIFICACAO SIMPLES

                -> [ condition  ] && action || action # IF ELSE


	* case:
		case "VAR" in
		    result1)
		        { body };;
		    result2)
     		        { body };;
		    *)
		        { body };;
		esac
		

	* for...do:
		for VAR in LIST
		do
		    { body }
		done

	
	
# ENTENDENDO A ADMINISTRACAO DO SISTEMA:
	* Comando su -> Muitas vezes su e usado para abrir um shell como usuario root. Com esse shell
	  aberto, o administrador pode executar varios comandos e depois sair para voltar para um shell
	  como um usuario regular.

	* Comando sudo -> Com sudo, um usuario regular tem privilegio de root, mas apenas quando
	  executa o comando sudo. Depois de executar esse comando e depois sair para voltar para um shell
	  como um usuario regular.

	* Janelas graficas -> Muitas Janelas graficas de administracao, as quais podem ser iniciadas a partir
	  do menu System ou Applications, podem tambem ser iniciadas por um usuario regular.
	  Quando privilegios de root sao necessarios, a senha de root sera solicitada.


	* Caracteristicas comumns que um administrador de sistema devera gerencias:
		-> Sistemas de arquivos - Quando voce instala o Linux, a estrutura de diretorios esta configurada
		   para tornar o sistema utilizavel. Mas se mais tarde voce quiser adcionar armazenamento extra ou
		   mudar o layout do sistema de arquivos, precisa de privilegios administrativos para fazer isso.

		-> Instalacao de software - Como os softwares maliciosos podem danificar seu sistema ou torna-lo
		   inseguro, voce precisa ter privilegios de root para instalar softwares de modo que estejam
		   disponiveis para todos os usuarios de seu sistema.

		-> Contas de usuario - Somente o usuario root pode adicionar e remover contas de usuario e de
		   grupo.

		-> Interfaces de rede - Costumava ser totalmente de responsabilidade do usuario root configurar
		   interfaces de rede, bem como iniciar e parar essas interfaces. Agora, muitos desktops Linux
		   permitem que usuarios regulares iniciem e parem interfaces de rede a partir de dua area de 
		   trabalho usando o Nerwork Manager.

		-> Servidores - Configurar servidores web, de arquivos, de nome de dominio, de email e dezenas
		   de outros servidores requer privilegios de root, assim como iniciar e parar servicos. Muitas
		   vezes, sevicos exevutados como usuarios nao root e conteudo, como paginas da web, podem ser
		   adicionados a servidores por usuarios nao-root se voce configurar seu sistema para permiti isso.

		-> Recursos de seguranca - A configuracao de recursos de sevuranca, como firewalls e listas de
		   acesso de usuario, geralmente e feita pelo usuario root. Tambem e de responsabilidade do usuario
		   root monitorar como os servicos estao sendo usadoes e se certificar de que os recursos do servidor
		   nao se esgotem nem seja abusados.


# USANDO A CONTA DE USUARIO ROOT:
	* estrutura de conta de usuario:

		-> root:x:0:0:root:/root:/bin/bash
	
				
		campos -> 1¬ - nome do usuario -> 2¬∫- senha (x) -> 3¬∫- id do usario -> 4¬∫- grupo do usuario -> 5¬∫- nome usuario -> 6¬∫- diretorio inicial -> 7¬∫- shell do usuario.

		
# EXPLORANDO COMANDOS ADMINISTRATIVOS, ARQUIVOS DE CONFIGURACAO E LOGS:
	* Comandos administrativos: 
		Muitos comandos administrativos foram concebidos para serem usados somente pelo usario root.
		Quando voce efetua login como root, sua variavel $PATH esta definida para incluir alguns diretorios que contem comandos para o usuario root. Elas
		incluem o seguinte:

			-> /sbin - Contem comandos necessarios para iniciar seu sistema, incluindo comandos para verificar sistemas de arquivos (fsck) e iniciar/parar servicos do sistema (service)

			-> /usr/sbin - Contem comandos para coisas como gerenciar contas de usuario(como useradd) e verificar processos que estao segurando arquivos abertos(como lsof). Comandos
			   que sao executados como processos daemon tambem estao contidos nesse diretorio. Processos daemon sao processos que rodam em segundo plano, a espera de requisicoes de servicos
		           como os para acessar um impressora ou uma pagina da web. (Olhe para os comandos que terminan em d, como sshd, pppd, cupsd). 

	* Arquivos de configuracao administrativa:
		$HOME -> Todos os usuarios armazenam informacoes em seus diretorios iniciais, que determinam
			 como suas contas de login se comportam. Varios arquivos de configuracao estao diretamente no
			 diretorio inicial  de cada usuario (como /home/joe) e comecam com um ponto (.), de tal modo
			 que eles nao aparecem no diretorio quando voce usa um comando ls padrao.
		    	 Da mesma maneira, arquivos e diretorios ponto nao vao
			 aparecer na  na maioria das janelas do gerenciador de arquivos por padrao. Ha arquivos ponto que
			 definen o comportamento do shell de cada usuario, a aparencia e comportamento do desktop e
			 opcoes utilizadas com seu editor de texto. Ha ate arquivos, como aqueles no diretorio $HOME/.ssh de cada usuario, configuram
			permissoes de rede para cada usuario.

		/etc -> Esse diretorio contem a maioria dos arquivos de configuracao de sistema basicos do Linux. A Tabela 8.1 mostra alguns arquivos de configuracao /etc de interesse.
		
		/etc/cron* -> Diretorios nesse conjinto contem arquivos que definem como o utilitario
			      crond executa aplicatios com base em uma agenda diario (cron.daily), de hora em hora
			      mensal ou semanal.

		/etc/cups -> Contem arquivos usados para configurar o servico de impressao CUPS.

		/etc/default -> Contem arquivos que definem valores padrao para diversas utilidades. Por
			        exemplo, o arquivo para o comando useradd define o numero do grupo padrao, o diretorio
				inicial, a data de expiracao de senha, o shell e o diretorio esqueleto (/etc/skel) que sao
				utilizados para criar uma nova conta de usuario.


		/etc/httpd -> Contem uma variedade de arquivos usados para configurar o comportamento de seu servidor web Apache
			      Em algus sistemas Linux, o diretorio /etc/apache ou /etc/apache2  e usado.

		/etc/init.d -> Contem as copias permanentes dos scripts de nivel de execucao no estilo
			       system V. Esses scripts sao muitas vezes linkados a partir dos diretorios /etc/rc?.d para ter
			       cada servico associado a um script iniciado ou parado para o nivel de exevucao especifico. O ?
			       e substituido pelo numero do nivel de execucao

		/etc/mail -> Contem arquivos usados para configurar o agente de transport de email sedmail.

		/etc/pcmcia -> Contem arquivos de configuracao que permitem que voce tenha uma variedade de cartoes pcmcia configurados para seu conputador.

		/etc/postfix -> Contem qqrquivos de configuracao para o agente de transporte de email postfix.

		/etc/ppp -> Contem diversos arquivos de configuracao usados para configurar o Point-to-Point Protocl (PPP), o qual permite fazer uma conexao discada com a internet.
		
		/etc/rc?.d -> Ha um diretorio rc?.d separado para cada estado valido  do sistema: rc0.d(desligado), rc1.d(monousuario), rc2.d(multiusuario), rc3.d(multiusario mais rede), rc4.d(definido pelo usuario)
			      rc5.d(multiusuario, rede e login GUI) e rc6.d(reboot).

		/etc/security -> Contem arquivos que definem uma variedade de condicoes de seguranca padrao para seu computador, basicamente definido como a autenticacao e feita. Esses arquivos sao parte do pacote pam
		
		/etc/skel -> Todos os arquivos contidos nesse diretorio sao automaticamente copiados para o diretorio inicial do usuario quando este e adicionado ao sistema. Por padrao, a maioria desses arquivos sao	
		arquivos ponto, como .kde(um diretorio para definir padroes do desktop KDE) e .bashrc (para definir os valores padrao utilizados com o shell bash).

		/etc/sysconfig -> Contem arquivos importantes do sistema de configuracao qque sao criados e mantidos por varios servicos (incluindo iptables, samba e a maioria dos servicos de rede).
		Esses arquivos sao essenciais para distribuicoes Linux, como Fedora e o RHEL, que usam ferramentas de interface grafica, mas nao sao usados em outros sistemas Linux.

		/etc/xinetd.d -> Contem um conjunto de arquivos, m que cada um deles define um servico de rede por demanda que o daemon xinetd escuta em uma porta especifica. Quando o processo de daemon xinetd recebe
		uma requisicao de um servico, ele usa as informacoes contidas nesses arquivos para determinar qual daemon processar para comecar a lidar com a requisicao.


		A SEGUIR SAO APRENSENTADOS ALGUNS ARQUIVOS DE CONFIGURACAO INTERESSANTES EM /etc:

		aliases -> Pode conter listas de distribuicao utilizadas pelo servico de e-mail Linux. (esse arquivo pode estar localizado em /etc/mail.)

		bashrc -> Define todos os padroes de nivel de sistema para usuarios do shell bash. (Isso pode ser chamado bash.bashrc em algumas distribuicoes Linux.)

		crontab -> Configura a data e a hora para a execucao de tarefas automatizadas e variaveis associadas com o recurso cron (como o SHELL e PATH associado com o cron).

		csh.cshrc(ou cshrc) -> Configura padroes de nivel de sistema para usuarios do csh(shell C)

		exports -> Contem uma lista de diretorios locais que estao disponiveis para serem compartilhados por computadores remotos usando o Network File System(NFS).

		fstab -> Identifica o s dispositivos de midia de armazenamento comuns (disco rigido, disquete, CD-ROM etc.) e os locais onde sao montados no sistemas Linux. Isso e usado pelo comando mount para escolher
		quais sistemas de arquivos devem ser montados primeiro na inicializacao do sistema.

		group -> Identifica os nomes e IDs de grupo (GID) que estao definidos no sistema. As permissoes de grupo no Linux sao definidas pelo segundo de tres conjustos de bits rwx (leitura, gravacao, execucao)
		associados com cada arquivo e diretorio.

		gshadow -> Contem senhas de sombra para grupos.

		host.conf -> Usado por aplicativos mais antigos para definir os locais em que os nomes de dominio (por exemplo, redhat.com) sao procurados em redes TCP/IP(como a internet). Por padrao, o arquivo hosts local e
		procurado e, entao, qualquer entrada de servidor de nomes em resolv.conf.

		hosts -> Contem enderecos IP e nomes de host que voce pode alcancar a partir de seu computador. (Normalmente, esse arquivo e usado apenas para  armazenar o nomes de computadores em sua rrede local ou pequena rede privada.)

		hosts.allow -> Lista computadores host que estao autorizados a utilizar determinados servicos TCP/IP do computador local.

		host.deny -> Lista computadores hos que nao estao autorizados a ultilizar determinados servicos TCP/IP do computador local(embora esse arquivo seja usado se voce cria-lo, ele nao existe por padrao).

		inittab -> Contem informacoes que definem quais programas iniciam e param quando o Linux e inicializado, e desligado ou entra em diferentes estados no meio disso. Esse arquivo de configuracao e o primeiro a ser lido
		quando o Linux inicia o processo init.

		mtab -> Contem uma lista de sistemas de arquivos que estao atualmente montados.

		mtools.conf -> Contem configuracoes usadas por ferraments DOS no Linux.

		named.conf -> Contem configuracoes de DNS, se voce estiver executando seu proprio servidor DNS.

		nsswitch.conf -> Contem configuracoes de troca do servico de nomes, para identificar de onde(host local ou via servicos de rede) vem as informacoes de sistemas criticos (contas de usuario, mapeamentos de nome de host/endereco.)

		ntp.conf -> Inclui informacoes necessarias para executar o Network Time Protocol(NTP).

		passswd -> Armazena informacoes de contas de todos os usuarios validos no sistema. Tambem inclui outras informacoes, como o diretorio inicial e  o shel padrao	
	










